➜ jonatan@prestige-15-a10sc  ~/Documentos/Master_Devops/Herramientas_DevOps/herramientas_devops/actividad1 git:(main) ✗ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.hello_jruedas_node will be created
  + resource "aws_instance" "hello_jruedas_node" {
      + ami                                  = "ami-0918245a959c9e8e3"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "JRuedas-EC2-Instance"
        }
      + tags_all                             = {
          + "Name" = "JRuedas-EC2-Instance"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_internet_gateway.jruedas-igw will be created
  + resource "aws_internet_gateway" "jruedas-igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "JRuedas-Internet-GW"
        }
      + tags_all = {
          + "Name" = "JRuedas-Internet-GW"
        }
      + vpc_id   = (known after apply)
    }

  # aws_route_table.jruedas-route-table will be created
  + resource "aws_route_table" "jruedas-route-table" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name" = "JRuedas-Route-Table"
        }
      + tags_all         = {
          + "Name" = "JRuedas-Route-Table"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.jruedas-route-table-asoc will be created
  + resource "aws_route_table_association" "jruedas-route-table-asoc" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.jruedas-allow_ssh_http will be created
  + resource "aws_security_group" "jruedas-allow_ssh_http" {
      + arn                    = (known after apply)
      + description            = "Allow SSH and HTTP inbound connections"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "jruedas-allow_ssh_http"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "JRuedas-Security-Group"
        }
      + tags_all               = {
          + "Name" = "JRuedas-Security-Group"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.jruedas-public-subnet will be created
  + resource "aws_subnet" "jruedas-public-subnet" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = (known after apply)
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "192.168.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "JRuedas-Public-Subnet"
        }
      + tags_all                        = {
          + "Name" = "JRuedas-Public-Subnet"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.jruedas-vpc will be created
  + resource "aws_vpc" "jruedas-vpc" {
      + arn                            = (known after apply)
      + cidr_block                     = "192.168.0.0/16"
      + default_network_acl_id         = (known after apply)
      + default_route_table_id         = (known after apply)
      + default_security_group_id      = (known after apply)
      + dhcp_options_id                = (known after apply)
      + enable_classiclink             = (known after apply)
      + enable_classiclink_dns_support = (known after apply)
      + enable_dns_hostnames           = true
      + enable_dns_support             = true
      + id                             = (known after apply)
      + instance_tenancy               = "default"
      + ipv6_association_id            = (known after apply)
      + ipv6_cidr_block                = (known after apply)
      + main_route_table_id            = (known after apply)
      + owner_id                       = (known after apply)
      + tags                           = {
          + "Name" = "JRuedas-VPC"
        }
      + tags_all                       = {
          + "Name" = "JRuedas-VPC"
        }
    }

Plan: 7 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_vpc.jruedas-vpc: Creating...
aws_vpc.jruedas-vpc: Still creating... [10s elapsed]
aws_vpc.jruedas-vpc: Still creating... [20s elapsed]
aws_vpc.jruedas-vpc: Creation complete after 22s [id=vpc-0a552dc3f9db1756e]
aws_internet_gateway.jruedas-igw: Creating...
aws_subnet.jruedas-public-subnet: Creating...
aws_security_group.jruedas-allow_ssh_http: Creating...
aws_subnet.jruedas-public-subnet: Creation complete after 2s [id=subnet-069819163e8a4faa7]
aws_internet_gateway.jruedas-igw: Creation complete after 2s [id=igw-0745529fcc0835b09]
aws_route_table.jruedas-route-table: Creating...
aws_security_group.jruedas-allow_ssh_http: Creation complete after 6s [id=sg-0904f9e8d8f10f424]
aws_instance.hello_jruedas_node: Creating...
aws_route_table.jruedas-route-table: Creation complete after 4s [id=rtb-025107bee18f81403]
aws_route_table_association.jruedas-route-table-asoc: Creating...
aws_route_table_association.jruedas-route-table-asoc: Creation complete after 1s [id=rtbassoc-07f88620fb6848825]
aws_instance.hello_jruedas_node: Still creating... [10s elapsed]
aws_instance.hello_jruedas_node: Still creating... [20s elapsed]
aws_instance.hello_jruedas_node: Still creating... [30s elapsed]
aws_instance.hello_jruedas_node: Still creating... [40s elapsed]
aws_instance.hello_jruedas_node: Creation complete after 49s [id=i-0965d00651c796400]

Apply complete! Resources: 7 added, 0 changed, 0 destroyed.